Контрольные вопросы
• В каких ситуациях в современном C++ рекомендуется использовать структуры?
• Какие аспекты следует учитывать при проектировании и разработке классов?
• Почему практически никогда не следует явным образом вызывать деструктор?
• В каких ситуациях можно использовать статические данные и функции классов?
• Почему использование друзей стандартными способами ухудшает инкапсуляцию?

1: Для представления простых данных без методов или инкапсуляции.
Для создания агрегатных типов данных, где элементы связаны и имеют общий смысл (например, точка в трехмерном пространстве).
Когда требуется передавать данные по значению, а не по ссылке, чтобы избежать изменения оригинальных данных.
Для работы с данными, которые не имеют инвариантов или не требуют сложной логики при обновлении.

2: Инкапсуляция: Скрытие внутренних деталей реализации и предоставление интерфейса для взаимодействия с объектами класса.

Абстракция: Определение сущностей класса с учетом их существенных характеристик и методов, которые ими оперируют.

Наследование: Создание иерархии классов для повторного использования кода и расширения функциональности.

Полиморфизм: Возможность объектов разных классов работать согласно общему интерфейсу, что упрощает обмен и использование объектов.

3: Потому что деструкторы вызываются автоматически при выходе из области видимости объекта, и явный вызов деструктора может привести
к ошибкам и нежелательным побочным эффектам, таким как двойное освобождение памяти (двойное удаление) или неправильное уничтожение объектов.

4: Для представления общей информации, доступной всем объектам класса, например, счетчика количества созданных объектов.

Когда требуется совместное использование данных между всеми экземплярами класса, например, для кэширования данных.

Для создания утилитарных функций, которые не зависят от конкретных экземпляров класса, но связаны с его областью применения.

Для организации общих ресурсов, например, баз данных или сетевых соединений, которые могут использоваться всеми объектами класса.

5: Использование друзей стандартными способами ухудшает инкапсуляцию, потому что он позволяет внешним
функциям и классам получать доступ к приватным членам класса, обходя его интерфейс и нарушая принцип
инкапсуляции, который предполагает скрытие деталей реализации от внешних сущностей.