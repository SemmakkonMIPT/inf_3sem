Контрольные вопросы
• Как используются шаблоны и какие разновидности шаблонов существуют?
• Что и почему предпочитает компилятор в перегрузке шаблонов функций?
• Как осуществляется инстанцирование функций-членов шаблонов классов?
• Для чего применяются полные или частичные специализации шаблонов?
• Приведите примеры ситуаций, для которых нужны вариативные шаблоны?

1.
Шаблоны представляют собой механизм, позволяющий создавать обобщенные функции и классы, работающие с различными типами данных.
Разновидности:
Шаблоны функций:
    Позволяют создавать функции, которые могут принимать аргументы разных типов
Шаблоны классов:
    Шаблоны классов подобны шаблонам функций, но применяются к классам
Шаблоны с несколькими параметрами:
    Можно создавать шаблоны с несколькими параметрами 
Можно создавать псевдонимы шаблонов
Шаблон переменной:
    Пример:
    template < typename T >
    const T pi = T(3.141592);
    это переменная шаблона, предоставляющая значение π для заданного типа данных 
Вариативные шаблоны (Variadic Templates):
    Вариативные шаблоны позволяют работать с переменным числом аргументов
Шаблоны операторов:
    Например: В функции f используется шаблон оператора + для прибавления 1 к каждому аргументу. (функция из GH)


2.
Шаблоны не компилируются в единую сущность, способную обработать любой тип данных.
Вместо этого из шаблона генерируются различные объекты для каждого типа, для которого применяется шаблон.
Таким образом, возможна перегрузка шаблона функции, и нешаблонная функция может сосуществовать с шаблоном функции с тем же именем (который может быть инстанцирован с тем же типом).
При прочих равных факторах, в процессе разрешения перегрузки компилятор предпочитает нешаблонные функции тем, которые генерируются из шаблона. 
В остальном, при перегрузке шаблонов следует учитывать следующие аспекты:
• Если шаблон может генерировать функцию с лучшим соответствием, то компилятор выберет шаблон.
• При явном указании пустого списка аргументов шаблона разрешить вызов может только шаблон, а параметры шаблона должны быть выведены из аргументов вызова.
• Если при при вызове функции указаны параметры, которые могут быть неявно приведены к параметрам в объявлении/определении функции, 
то, поскольку автоматическое преобразование типов не рассматривается при выводе параметров шаблона, будет использована нормальная функция (если шаблон не может быть использован).
• При перегрузке шаблонов функций возможно возникновение ошибки неоднозначности, поэтому следует убедиться, что любому вызову соответствует только один из шаблонов.

3.
Инстанцирование происходит только для вызываемых функций-членов шаблона.
Для шаблонов классов функции-члены инстанцируются только при их использовании, такой подход позволяет сэкономить время, память и использовать шаблоны классов только частично.

4.
Оптимизация для конкретных типов: Можно создать специализированные версии шаблонов, оптимизированные для работы с определенными типами данных.

Обработка частных случаев: Частичные специализации позволяют обрабатывать частные случаи, когда общая реализация не применима или неэффективна.

Специфическое поведение для определенных условий: Специализации могут предоставлять специфическое поведение для определенных условий или требований.

5.
Функции для работы с переменным числом аргументов

Создание сложных типов данных (например, кортежей)

Рекурсивные алгоритмы с переменным числом параметров

Обработка аргументов функции с разными типами

